/* automatically generated by rust-bindgen 0.65.1 */

pub const FT_DEVICE_DESCRIPTOR_TYPE: u32 = 1;
pub const FT_CONFIGURATION_DESCRIPTOR_TYPE: u32 = 2;
pub const FT_STRING_DESCRIPTOR_TYPE: u32 = 3;
pub const FT_INTERFACE_DESCRIPTOR_TYPE: u32 = 4;
pub const FT_RESERVED_INTERFACE_INDEX: u32 = 0;
pub const FT_RESERVED_PIPE_INDEX_SESSION: u32 = 0;
pub const FT_RESERVED_PIPE_INDEX_NOTIFICATION: u32 = 1;
pub const FT_RESERVED_PIPE_SESSION: u32 = 1;
pub const FT_RESERVED_PIPE_NOTIFICATION: u32 = 129;
pub const FT_OPEN_BY_SERIAL_NUMBER: u32 = 1;
pub const FT_OPEN_BY_DESCRIPTION: u32 = 2;
pub const FT_OPEN_BY_LOCATION: u32 = 4;
pub const FT_OPEN_BY_GUID: u32 = 8;
pub const FT_OPEN_BY_INDEX: u32 = 16;
pub const FT_LIST_ALL: u32 = 536870912;
pub const FT_LIST_BY_INDEX: u32 = 1073741824;
pub const FT_LIST_NUMBER_ONLY: u32 = 2147483648;
pub const FT_GPIO_DIRECTION_IN: u32 = 0;
pub const FT_GPIO_DIRECTION_OUT: u32 = 1;
pub const FT_GPIO_VALUE_LOW: u32 = 0;
pub const FT_GPIO_VALUE_HIGH: u32 = 1;
pub const FT_GPIO_0: u32 = 0;
pub const FT_GPIO_1: u32 = 1;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type ULONG = ::std::os::raw::c_ulong;
pub type PULONG = *mut ULONG;
pub type USHORT = ::std::os::raw::c_ushort;
pub type PUSHORT = *mut USHORT;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type PUCHAR = *mut UCHAR;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type UINT32 = ::std::os::raw::c_uint;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type CHAR = ::std::os::raw::c_char;
pub type WCHAR = wchar_t;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type BOOLEAN = BYTE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OVERLAPPED {
    pub Internal: ULONG_PTR,
    pub InternalHigh: ULONG_PTR,
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1,
    pub hEvent: HANDLE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OVERLAPPED__bindgen_ty_1 {
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1,
    pub Pointer: PVOID,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 {
    pub Offset: DWORD,
    pub OffsetHigh: DWORD,
}
#[test]
fn bindgen_test_layout__OVERLAPPED__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetHigh) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(OffsetHigh)
        )
    );
}
#[test]
fn bindgen_test_layout__OVERLAPPED__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_OVERLAPPED__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_OVERLAPPED__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_OVERLAPPED__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pointer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED__bindgen_ty_1),
            "::",
            stringify!(Pointer)
        )
    );
}
impl Default for _OVERLAPPED__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__OVERLAPPED() {
    const UNINIT: ::std::mem::MaybeUninit<_OVERLAPPED> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OVERLAPPED>(),
        32usize,
        concat!("Size of: ", stringify!(_OVERLAPPED))
    );
    assert_eq!(
        ::std::mem::align_of::<_OVERLAPPED>(),
        8usize,
        concat!("Alignment of ", stringify!(_OVERLAPPED))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Internal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(Internal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InternalHigh) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(InternalHigh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_OVERLAPPED),
            "::",
            stringify!(hEvent)
        )
    );
}
impl Default for _OVERLAPPED {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type LPOVERLAPPED = *mut _OVERLAPPED;
pub type FT_HANDLE = PVOID;
pub type FT_STATUS = ULONG;
pub const _FT_PIPE_TYPE_FTPipeTypeControl: _FT_PIPE_TYPE = 0;
pub const _FT_PIPE_TYPE_FTPipeTypeIsochronous: _FT_PIPE_TYPE = 1;
pub const _FT_PIPE_TYPE_FTPipeTypeBulk: _FT_PIPE_TYPE = 2;
pub const _FT_PIPE_TYPE_FTPipeTypeInterrupt: _FT_PIPE_TYPE = 3;
pub type _FT_PIPE_TYPE = ::std::os::raw::c_int;
pub use self::_FT_PIPE_TYPE as FT_PIPE_TYPE;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FT_COMMON_DESCRIPTOR {
    pub bLength: UCHAR,
    pub bDescriptorType: UCHAR,
}
#[test]
fn bindgen_test_layout__FT_COMMON_DESCRIPTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_COMMON_DESCRIPTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_COMMON_DESCRIPTOR>(),
        2usize,
        concat!("Size of: ", stringify!(_FT_COMMON_DESCRIPTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_COMMON_DESCRIPTOR>(),
        1usize,
        concat!("Alignment of ", stringify!(_FT_COMMON_DESCRIPTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_COMMON_DESCRIPTOR),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_COMMON_DESCRIPTOR),
            "::",
            stringify!(bDescriptorType)
        )
    );
}
pub type FT_COMMON_DESCRIPTOR = _FT_COMMON_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FT_DEVICE_DESCRIPTOR {
    pub bLength: UCHAR,
    pub bDescriptorType: UCHAR,
    pub bcdUSB: USHORT,
    pub bDeviceClass: UCHAR,
    pub bDeviceSubClass: UCHAR,
    pub bDeviceProtocol: UCHAR,
    pub bMaxPacketSize0: UCHAR,
    pub idVendor: USHORT,
    pub idProduct: USHORT,
    pub bcdDevice: USHORT,
    pub iManufacturer: UCHAR,
    pub iProduct: UCHAR,
    pub iSerialNumber: UCHAR,
    pub bNumConfigurations: UCHAR,
}
#[test]
fn bindgen_test_layout__FT_DEVICE_DESCRIPTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_DEVICE_DESCRIPTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_DEVICE_DESCRIPTOR>(),
        18usize,
        concat!("Size of: ", stringify!(_FT_DEVICE_DESCRIPTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_DEVICE_DESCRIPTOR>(),
        2usize,
        concat!("Alignment of ", stringify!(_FT_DEVICE_DESCRIPTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdUSB) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bcdUSB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceClass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bDeviceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceSubClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bDeviceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeviceProtocol) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bDeviceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMaxPacketSize0) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bMaxPacketSize0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idVendor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(idVendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idProduct) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(idProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcdDevice) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bcdDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iManufacturer) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(iManufacturer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iProduct) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(iProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iSerialNumber) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(iSerialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumConfigurations) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_DESCRIPTOR),
            "::",
            stringify!(bNumConfigurations)
        )
    );
}
pub type FT_DEVICE_DESCRIPTOR = _FT_DEVICE_DESCRIPTOR;
pub type PFT_DEVICE_DESCRIPTOR = *mut _FT_DEVICE_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FT_CONFIGURATION_DESCRIPTOR {
    pub bLength: UCHAR,
    pub bDescriptorType: UCHAR,
    pub wTotalLength: USHORT,
    pub bNumInterfaces: UCHAR,
    pub bConfigurationValue: UCHAR,
    pub iConfiguration: UCHAR,
    pub bmAttributes: UCHAR,
    pub MaxPower: UCHAR,
}
#[test]
fn bindgen_test_layout__FT_CONFIGURATION_DESCRIPTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_CONFIGURATION_DESCRIPTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_CONFIGURATION_DESCRIPTOR>(),
        10usize,
        concat!("Size of: ", stringify!(_FT_CONFIGURATION_DESCRIPTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_CONFIGURATION_DESCRIPTOR>(),
        2usize,
        concat!("Alignment of ", stringify!(_FT_CONFIGURATION_DESCRIPTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_CONFIGURATION_DESCRIPTOR),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_CONFIGURATION_DESCRIPTOR),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wTotalLength) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_CONFIGURATION_DESCRIPTOR),
            "::",
            stringify!(wTotalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumInterfaces) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_CONFIGURATION_DESCRIPTOR),
            "::",
            stringify!(bNumInterfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bConfigurationValue) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_CONFIGURATION_DESCRIPTOR),
            "::",
            stringify!(bConfigurationValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iConfiguration) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_CONFIGURATION_DESCRIPTOR),
            "::",
            stringify!(iConfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmAttributes) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_CONFIGURATION_DESCRIPTOR),
            "::",
            stringify!(bmAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxPower) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_CONFIGURATION_DESCRIPTOR),
            "::",
            stringify!(MaxPower)
        )
    );
}
pub type FT_CONFIGURATION_DESCRIPTOR = _FT_CONFIGURATION_DESCRIPTOR;
pub type PFT_CONFIGURATION_DESCRIPTOR = *mut _FT_CONFIGURATION_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FT_INTERFACE_DESCRIPTOR {
    pub bLength: UCHAR,
    pub bDescriptorType: UCHAR,
    pub bInterfaceNumber: UCHAR,
    pub bAlternateSetting: UCHAR,
    pub bNumEndpoints: UCHAR,
    pub bInterfaceClass: UCHAR,
    pub bInterfaceSubClass: UCHAR,
    pub bInterfaceProtocol: UCHAR,
    pub iInterface: UCHAR,
}
#[test]
fn bindgen_test_layout__FT_INTERFACE_DESCRIPTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_INTERFACE_DESCRIPTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_INTERFACE_DESCRIPTOR>(),
        9usize,
        concat!("Size of: ", stringify!(_FT_INTERFACE_DESCRIPTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_INTERFACE_DESCRIPTOR>(),
        1usize,
        concat!("Alignment of ", stringify!(_FT_INTERFACE_DESCRIPTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceNumber) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(bInterfaceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAlternateSetting) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(bAlternateSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNumEndpoints) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(bNumEndpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceClass) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(bInterfaceClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceSubClass) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(bInterfaceSubClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterfaceProtocol) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(bInterfaceProtocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iInterface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_INTERFACE_DESCRIPTOR),
            "::",
            stringify!(iInterface)
        )
    );
}
pub type FT_INTERFACE_DESCRIPTOR = _FT_INTERFACE_DESCRIPTOR;
pub type PFT_INTERFACE_DESCRIPTOR = *mut _FT_INTERFACE_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FT_STRING_DESCRIPTOR {
    pub bLength: UCHAR,
    pub bDescriptorType: UCHAR,
    pub szString: [WCHAR; 256usize],
}
#[test]
fn bindgen_test_layout__FT_STRING_DESCRIPTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_STRING_DESCRIPTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_STRING_DESCRIPTOR>(),
        514usize,
        concat!("Size of: ", stringify!(_FT_STRING_DESCRIPTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_STRING_DESCRIPTOR>(),
        2usize,
        concat!("Alignment of ", stringify!(_FT_STRING_DESCRIPTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_STRING_DESCRIPTOR),
            "::",
            stringify!(bLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDescriptorType) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_STRING_DESCRIPTOR),
            "::",
            stringify!(bDescriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).szString) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_STRING_DESCRIPTOR),
            "::",
            stringify!(szString)
        )
    );
}
impl Default for _FT_STRING_DESCRIPTOR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FT_STRING_DESCRIPTOR = _FT_STRING_DESCRIPTOR;
pub type PFT_STRING_DESCRIPTOR = *mut _FT_STRING_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FT_PIPE_INFORMATION {
    pub PipeType: FT_PIPE_TYPE,
    pub PipeId: UCHAR,
    pub MaximumPacketSize: USHORT,
    pub Interval: UCHAR,
}
#[test]
fn bindgen_test_layout__FT_PIPE_INFORMATION() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_PIPE_INFORMATION> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_PIPE_INFORMATION>(),
        12usize,
        concat!("Size of: ", stringify!(_FT_PIPE_INFORMATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_PIPE_INFORMATION>(),
        4usize,
        concat!("Alignment of ", stringify!(_FT_PIPE_INFORMATION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PipeType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_PIPE_INFORMATION),
            "::",
            stringify!(PipeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PipeId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_PIPE_INFORMATION),
            "::",
            stringify!(PipeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaximumPacketSize) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_PIPE_INFORMATION),
            "::",
            stringify!(MaximumPacketSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Interval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_PIPE_INFORMATION),
            "::",
            stringify!(Interval)
        )
    );
}
impl Default for _FT_PIPE_INFORMATION {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FT_PIPE_INFORMATION = _FT_PIPE_INFORMATION;
pub type PFT_PIPE_INFORMATION = *mut _FT_PIPE_INFORMATION;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FT_SETUP_PACKET {
    pub RequestType: UCHAR,
    pub Request: UCHAR,
    pub Value: USHORT,
    pub Index: USHORT,
    pub Length: USHORT,
}
#[test]
fn bindgen_test_layout__FT_SETUP_PACKET() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_SETUP_PACKET> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_SETUP_PACKET>(),
        8usize,
        concat!("Size of: ", stringify!(_FT_SETUP_PACKET))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_SETUP_PACKET>(),
        2usize,
        concat!("Alignment of ", stringify!(_FT_SETUP_PACKET))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequestType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_SETUP_PACKET),
            "::",
            stringify!(RequestType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_SETUP_PACKET),
            "::",
            stringify!(Request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_SETUP_PACKET),
            "::",
            stringify!(Value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_SETUP_PACKET),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_SETUP_PACKET),
            "::",
            stringify!(Length)
        )
    );
}
pub type FT_SETUP_PACKET = _FT_SETUP_PACKET;
pub const _E_FT_NOTIFICATION_CALLBACK_TYPE_E_FT_NOTIFICATION_CALLBACK_TYPE_DATA:
    _E_FT_NOTIFICATION_CALLBACK_TYPE = 0;
pub const _E_FT_NOTIFICATION_CALLBACK_TYPE_E_FT_NOTIFICATION_CALLBACK_TYPE_GPIO:
    _E_FT_NOTIFICATION_CALLBACK_TYPE = 1;
pub type _E_FT_NOTIFICATION_CALLBACK_TYPE = ::std::os::raw::c_int;
pub use self::_E_FT_NOTIFICATION_CALLBACK_TYPE as E_FT_NOTIFICATION_CALLBACK_TYPE;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FT_NOTIFICATION_CALLBACK_INFO_DATA {
    pub ulRecvNotificationLength: ULONG,
    pub ucEndpointNo: UCHAR,
}
#[test]
fn bindgen_test_layout__FT_NOTIFICATION_CALLBACK_INFO_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_NOTIFICATION_CALLBACK_INFO_DATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_NOTIFICATION_CALLBACK_INFO_DATA>(),
        8usize,
        concat!("Size of: ", stringify!(_FT_NOTIFICATION_CALLBACK_INFO_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_NOTIFICATION_CALLBACK_INFO_DATA>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_FT_NOTIFICATION_CALLBACK_INFO_DATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRecvNotificationLength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_NOTIFICATION_CALLBACK_INFO_DATA),
            "::",
            stringify!(ulRecvNotificationLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucEndpointNo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_NOTIFICATION_CALLBACK_INFO_DATA),
            "::",
            stringify!(ucEndpointNo)
        )
    );
}
pub type FT_NOTIFICATION_CALLBACK_INFO_DATA = _FT_NOTIFICATION_CALLBACK_INFO_DATA;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FT_NOTIFICATION_CALLBACK_INFO_GPIO {
    pub bGPIO0: BOOL,
    pub bGPIO1: BOOL,
}
#[test]
fn bindgen_test_layout__FT_NOTIFICATION_CALLBACK_INFO_GPIO() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_NOTIFICATION_CALLBACK_INFO_GPIO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_NOTIFICATION_CALLBACK_INFO_GPIO>(),
        8usize,
        concat!("Size of: ", stringify!(_FT_NOTIFICATION_CALLBACK_INFO_GPIO))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_NOTIFICATION_CALLBACK_INFO_GPIO>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_FT_NOTIFICATION_CALLBACK_INFO_GPIO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bGPIO0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_NOTIFICATION_CALLBACK_INFO_GPIO),
            "::",
            stringify!(bGPIO0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bGPIO1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_NOTIFICATION_CALLBACK_INFO_GPIO),
            "::",
            stringify!(bGPIO1)
        )
    );
}
pub type FT_NOTIFICATION_CALLBACK_INFO_GPIO = _FT_NOTIFICATION_CALLBACK_INFO_GPIO;
pub type FT_NOTIFICATION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvCallbackContext: PVOID,
        eCallbackType: E_FT_NOTIFICATION_CALLBACK_TYPE,
        pvCallbackInfo: PVOID,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_60XCONFIGURATION {
    pub VendorID: USHORT,
    pub ProductID: USHORT,
    pub StringDescriptors: [UCHAR; 128usize],
    pub bInterval: UCHAR,
    pub PowerAttributes: UCHAR,
    pub PowerConsumption: USHORT,
    pub Reserved2: UCHAR,
    pub FIFOClock: UCHAR,
    pub FIFOMode: UCHAR,
    pub ChannelConfig: UCHAR,
    pub OptionalFeatureSupport: USHORT,
    pub BatteryChargingGPIOConfig: UCHAR,
    pub FlashEEPROMDetection: UCHAR,
    pub MSIO_Control: ULONG,
    pub GPIO_Control: ULONG,
}
#[test]
fn bindgen_test_layout_FT_60XCONFIGURATION() {
    const UNINIT: ::std::mem::MaybeUninit<FT_60XCONFIGURATION> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FT_60XCONFIGURATION>(),
        152usize,
        concat!("Size of: ", stringify!(FT_60XCONFIGURATION))
    );
    assert_eq!(
        ::std::mem::align_of::<FT_60XCONFIGURATION>(),
        4usize,
        concat!("Alignment of ", stringify!(FT_60XCONFIGURATION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(VendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductID) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StringDescriptors) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(StringDescriptors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInterval) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(bInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PowerAttributes) as usize - ptr as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(PowerAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PowerConsumption) as usize - ptr as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(PowerConsumption)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(Reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FIFOClock) as usize - ptr as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(FIFOClock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FIFOMode) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(FIFOMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChannelConfig) as usize - ptr as usize },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(ChannelConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OptionalFeatureSupport) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(OptionalFeatureSupport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BatteryChargingGPIOConfig) as usize - ptr as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(BatteryChargingGPIOConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FlashEEPROMDetection) as usize - ptr as usize },
        143usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(FlashEEPROMDetection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MSIO_Control) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(MSIO_Control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPIO_Control) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(FT_60XCONFIGURATION),
            "::",
            stringify!(GPIO_Control)
        )
    );
}
impl Default for FT_60XCONFIGURATION {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const _FT_DEVICE_FT_DEVICE_UNKNOWN: _FT_DEVICE = 3;
pub const _FT_DEVICE_FT_DEVICE_600: _FT_DEVICE = 600;
pub const _FT_DEVICE_FT_DEVICE_601: _FT_DEVICE = 601;
pub type _FT_DEVICE = ::std::os::raw::c_int;
pub use self::_FT_DEVICE as FT_DEVICE;
pub const _FT_FLAGS_FT_FLAGS_OPENED: _FT_FLAGS = 1;
pub const _FT_FLAGS_FT_FLAGS_HISPEED: _FT_FLAGS = 2;
pub const _FT_FLAGS_FT_FLAGS_SUPERSPEED: _FT_FLAGS = 4;
pub type _FT_FLAGS = ::std::os::raw::c_int;
pub use self::_FT_FLAGS as FT_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FT_DEVICE_LIST_INFO_NODE {
    pub Flags: ULONG,
    pub Type: ULONG,
    pub ID: ULONG,
    pub LocId: DWORD,
    pub SerialNumber: [::std::os::raw::c_char; 16usize],
    pub Description: [::std::os::raw::c_char; 32usize],
    pub ftHandle: FT_HANDLE,
}
#[test]
fn bindgen_test_layout__FT_DEVICE_LIST_INFO_NODE() {
    const UNINIT: ::std::mem::MaybeUninit<_FT_DEVICE_LIST_INFO_NODE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FT_DEVICE_LIST_INFO_NODE>(),
        72usize,
        concat!("Size of: ", stringify!(_FT_DEVICE_LIST_INFO_NODE))
    );
    assert_eq!(
        ::std::mem::align_of::<_FT_DEVICE_LIST_INFO_NODE>(),
        8usize,
        concat!("Alignment of ", stringify!(_FT_DEVICE_LIST_INFO_NODE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_LIST_INFO_NODE),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_LIST_INFO_NODE),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_LIST_INFO_NODE),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocId) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_LIST_INFO_NODE),
            "::",
            stringify!(LocId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SerialNumber) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_LIST_INFO_NODE),
            "::",
            stringify!(SerialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Description) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_LIST_INFO_NODE),
            "::",
            stringify!(Description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftHandle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_FT_DEVICE_LIST_INFO_NODE),
            "::",
            stringify!(ftHandle)
        )
    );
}
impl Default for _FT_DEVICE_LIST_INFO_NODE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FT_DEVICE_LIST_INFO_NODE = _FT_DEVICE_LIST_INFO_NODE;
extern "C" {
    pub fn FT_Create(pvArg: PVOID, dwFlags: DWORD, pftHandle: *mut FT_HANDLE) -> FT_STATUS;
}
extern "C" {
    pub fn FT_Close(ftHandle: FT_HANDLE) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetVIDPID(ftHandle: FT_HANDLE, puwVID: PUSHORT, puwPID: PUSHORT) -> FT_STATUS;
}
extern "C" {
    pub fn FT_WritePipe(
        ftHandle: FT_HANDLE,
        ucPipeID: UCHAR,
        pucBuffer: PUCHAR,
        ulBufferLength: ULONG,
        pulBytesTransferred: PULONG,
        pOverlapped: LPOVERLAPPED,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ReadPipe(
        ftHandle: FT_HANDLE,
        ucPipeID: UCHAR,
        pucBuffer: PUCHAR,
        ulBufferLength: ULONG,
        pulBytesTransferred: PULONG,
        pOverlapped: LPOVERLAPPED,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_WritePipeEx(
        ftHandle: FT_HANDLE,
        ucPipeID: UCHAR,
        pucBuffer: PUCHAR,
        ulBufferLength: ULONG,
        pulBytesTransferred: PULONG,
        pOverlapped: LPOVERLAPPED,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ReadPipeEx(
        ftHandle: FT_HANDLE,
        ucPipeID: UCHAR,
        pucBuffer: PUCHAR,
        ulBufferLength: ULONG,
        pulBytesTransferred: PULONG,
        pOverlapped: LPOVERLAPPED,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetOverlappedResult(
        ftHandle: FT_HANDLE,
        pOverlapped: LPOVERLAPPED,
        pulBytesTransferred: PULONG,
        bWait: BOOL,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_InitializeOverlapped(ftHandle: FT_HANDLE, pOverlapped: LPOVERLAPPED) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ReleaseOverlapped(ftHandle: FT_HANDLE, pOverlapped: LPOVERLAPPED) -> FT_STATUS;
}
extern "C" {
    pub fn FT_SetStreamPipe(
        ftHandle: FT_HANDLE,
        bAllWritePipes: BOOLEAN,
        bAllReadPipes: BOOLEAN,
        ucPipeID: UCHAR,
        ulStreamSize: ULONG,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ClearStreamPipe(
        ftHandle: FT_HANDLE,
        bAllWritePipes: BOOLEAN,
        bAllReadPipes: BOOLEAN,
        ucPipeID: UCHAR,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_FlushPipe(ftHandle: FT_HANDLE, ucPipeID: UCHAR) -> FT_STATUS;
}
extern "C" {
    pub fn FT_AbortPipe(ftHandle: FT_HANDLE, ucPipeID: UCHAR) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetDeviceDescriptor(
        ftHandle: FT_HANDLE,
        ptDescriptor: PFT_DEVICE_DESCRIPTOR,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetConfigurationDescriptor(
        ftHandle: FT_HANDLE,
        ptDescriptor: PFT_CONFIGURATION_DESCRIPTOR,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetInterfaceDescriptor(
        ftHandle: FT_HANDLE,
        ucInterfaceIndex: UCHAR,
        ptDescriptor: PFT_INTERFACE_DESCRIPTOR,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetPipeInformation(
        ftHandle: FT_HANDLE,
        ucInterfaceIndex: UCHAR,
        ucPipeIndex: UCHAR,
        ptPipeInformation: PFT_PIPE_INFORMATION,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetStringDescriptor(
        ftHandle: FT_HANDLE,
        ucStringIndex: UCHAR,
        ptDescriptor: PFT_STRING_DESCRIPTOR,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetDescriptor(
        ftHandle: FT_HANDLE,
        ucDescriptorType: UCHAR,
        ucIndex: UCHAR,
        pucBuffer: PUCHAR,
        ulBufferLength: ULONG,
        pulLengthTransferred: PULONG,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ControlTransfer(
        ftHandle: FT_HANDLE,
        tSetupPacket: FT_SETUP_PACKET,
        pucBuffer: PUCHAR,
        ulBufferLength: ULONG,
        pulLengthTransferred: PULONG,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_SetNotificationCallback(
        ftHandle: FT_HANDLE,
        pCallback: FT_NOTIFICATION_CALLBACK,
        pvCallbackContext: PVOID,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ClearNotificationCallback(ftHandle: FT_HANDLE);
}
extern "C" {
    pub fn FT_GetChipConfiguration(ftHandle: FT_HANDLE, pvConfiguration: PVOID) -> FT_STATUS;
}
extern "C" {
    pub fn FT_SetChipConfiguration(ftHandle: FT_HANDLE, pvConfiguration: PVOID) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetFirmwareVersion(ftHandle: FT_HANDLE, pulFirmwareVersion: PULONG) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ResetDevicePort(ftHandle: FT_HANDLE) -> FT_STATUS;
}
extern "C" {
    pub fn FT_CycleDevicePort(ftHandle: FT_HANDLE) -> FT_STATUS;
}
extern "C" {
    pub fn FT_CreateDeviceInfoList(lpdwNumDevs: LPDWORD) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetDeviceInfoList(
        ptDest: *mut FT_DEVICE_LIST_INFO_NODE,
        lpdwNumDevs: LPDWORD,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetDeviceInfoDetail(
        dwIndex: DWORD,
        lpdwFlags: LPDWORD,
        lpdwType: LPDWORD,
        lpdwID: LPDWORD,
        lpdwLocId: LPDWORD,
        lpSerialNumber: LPVOID,
        lpDescription: LPVOID,
        pftHandle: *mut FT_HANDLE,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ListDevices(pArg1: PVOID, pArg2: PVOID, Flags: DWORD) -> FT_STATUS;
}
extern "C" {
    pub fn FT_IsDevicePath(ftHandle: FT_HANDLE, pucDevicePath: *const CHAR) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetDriverVersion(ftHandle: FT_HANDLE, lpdwVersion: LPDWORD) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetLibraryVersion(lpdwVersion: LPDWORD) -> FT_STATUS;
}
extern "C" {
    pub fn FT_SetPipeTimeout(ftHandle: FT_HANDLE, ucPipeID: UCHAR, TimeoutInMs: ULONG)
        -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetPipeTimeout(
        ftHandle: FT_HANDLE,
        ucPipeID: UCHAR,
        pTimeoutInMs: PULONG,
    ) -> FT_STATUS;
}
extern "C" {
    pub fn FT_SetSuspendTimeout(ftHandle: FT_HANDLE, Timeout: ULONG) -> FT_STATUS;
}
extern "C" {
    pub fn FT_GetSuspendTimeout(ftHandle: FT_HANDLE, pTimeout: PULONG) -> FT_STATUS;
}
extern "C" {
    pub fn FT_EnableGPIO(ftHandle: FT_HANDLE, u32Mask: UINT32, u32Dir: UINT32) -> FT_STATUS;
}
extern "C" {
    pub fn FT_WriteGPIO(ftHandle: FT_HANDLE, u32Mask: UINT32, u32Data: UINT32) -> FT_STATUS;
}
extern "C" {
    pub fn FT_ReadGPIO(ftHandle: FT_HANDLE, pu32Data: *mut UINT32) -> FT_STATUS;
}
extern "C" {
    pub fn FT_SetGPIOPull(ftHandle: FT_HANDLE, u32Mask: UINT32, u32Pull: UINT32) -> FT_STATUS;
}
extern "C" {
    pub fn FT_SetGPIOLevel(ftHandle: FT_HANDLE, u32Mask: UINT32, u32Level: UINT32) -> FT_STATUS;
}
